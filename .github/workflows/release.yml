name: Release

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: "3.13"
      poetry-version:
        required: false
        type: string
        default: "2.1.2"
      os:
        required: false
        type: string
        default: "ubuntu-latest"
      env:
        required: false
        type: string
        default: '{}'
      submodules:
        required: false
        type: boolean
        default: false
      fetch-depth:
        required: false
        type: number
        default: 1
    secrets:
      pypi-token:
        required: true

jobs:
  publish:
    runs-on: ${{ inputs.os }}
    env: ${{ fromJSON(inputs.env) }}

    defaults:
      run:
        shell: bash

    steps:
      - name: "Check out repository"
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.submodules }}
          fetch-depth: ${{ inputs.fetch-depth }}

      - name: "Set up python"
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - uses: MrThearMan/CI/.github/actions/poetry@v0.4.16
        with:
          os: ${{ inputs.os }}
          poetry-version: ${{ inputs.poetry-version }}
          python-version: ${{ steps.setup-python.outputs.python-version }}

      - name: "Load cached poetry environment"
        uses: actions/cache@v4
        with:
          path: .venv
          key: cache-v1-release-python${{ steps.setup-python.outputs.python-version }}-${{ inputs.os }}

      - name: "Pre-release hook"
        if: ${{ hashFiles('.github/actions/pre-release/action.yml') != '' }}
        uses: ./.github/actions/pre-release

      - name: "Install dependencies"
        run: poetry install

      - name: "Test that project version matches release version"
        run: |
          echo "Project version: '$(poetry version -s | tr -d '\n' | tr -d '\r\n')'"
          echo "Release version: '$(echo ${{ github.event.release.tag_name }} | tr -d 'v')'"
          test $(poetry version -s | tr -d '\n' | tr -d '\r\n') == $(echo ${{ github.event.release.tag_name }} | tr -d 'v')

      - name: "Publish on PyPi"
        run: poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.pypi-token }}

      - name: "Post-release hook"
        if: ${{ hashFiles('.github/actions/post-release/action.yml') != '' }}
        uses: ./.github/actions/post-release
