name: Test

on:
  workflow_call:
    inputs:

      # Python versions used
      env:
        required: false
        type: string
        default: '["py37", "py38", "py39", "py310", "py311"]'

      # Operating systems used
      os:
        required: false
        type: string
        default: '["ubuntu-latest", "macos-latest", "windows-latest"]'

      # Poetry version to use
      poetry-version:
        required: false
        type: string
        default: "1.3.1"

      # A single python version to exclude
      env-exclude:
        required: false
        type: string
        default: '4.0'

      # A single operating system to exclude
      os-exclude:
        required: false
        type: string
        default: 'none'

jobs:

  test:
    name: ${{ matrix.env }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    env:
      COVERALLS_PARALLEL: true
      COVERALLS_FLAG_NAME: ${{ matrix.env }}-${{ matrix.os }}

    strategy:
      matrix:
        os: ${{ fromJSON(inputs.os) }}
        env: ${{ fromJSON(inputs.env) }}
        exclude:
          - os: ${{ inputs.os-exclude }}
            env: ${{ inputs.env-exclude }}

    steps:
      - name: "Check out repository"
        uses: actions/checkout@v3

      - name: "Install poetry"
        run: pipx install "poetry==${{ inputs.poetry-version }}"

      - name: "Set up python"
        id: setup-python
        uses: actions/setup-python@v4
        with:
          cache: "poetry"
          python-version: |
            ${{
              (matrix.env == 'py37' || startsWith(matrix.env, 'py37-')) && '3.7' ||
              (matrix.env == 'py38' || startsWith(matrix.env, 'py38-')) && '3.8' ||
              (matrix.env == 'py39' || startsWith(matrix.env, 'py39-')) && '3.9' ||
              (matrix.env == 'py310' || startsWith(matrix.env, 'py310-')) && '3.10' ||
              '3.11'
            }}

      - name: "Load cached dependencies and pre-commit hooks"
        uses: actions/cache@v3
        with:
          path: .tox
          key: cache-v1-python${{ steps.setup-python.outputs.python-version }}-${{ matrix.env }}-${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: "Pre test hook"
        if: ${{ hashFiles('.github/actions/pre-test/action.yml') != '' }}
        uses: ./.github/actions/pre-test

      - name: "Install dependencies"
        run: poetry install

      - name: "Run tox"
        run: poetry run tox -e ${{ matrix.env }}

      - name: "Post test hook"
        if: ${{ hashFiles('.github/actions/post-test/action.yml') != '' }}
        uses: ./.github/actions/post-test

      - name: "Submit coverage"
        run: poetry run coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  submit-coverage:
    needs: test
    runs-on: ubuntu-latest

    env:
      COVERALLS_PARALLEL: true

    steps:
      - name: "Check out repository"
        uses: actions/checkout@v3

      - name: "Install poetry"
        run: pipx install "poetry==${{ inputs.poetry-version }}"

      - name: "Set up python"
        uses: actions/setup-python@v4
        with:
          cache: "poetry"
          python-version: "3.11"

      - name: "Install dependencies"
        run: poetry install

      - name: "Finnish coverage report"
        run: poetry run coveralls --service=github --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
